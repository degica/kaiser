#!/usr/bin/env ruby

require 'optimist'
require 'fileutils'
require 'yaml'
require 'json'
require 'pty'
require 'erb'

$LOAD_PATH << "#{__dir__}/../lib"

require "kaiser"

SUB_COMMANDS = %w[
  init
  deinit
  up
  down
  shutdown
  db_save
  db_load
  db_reset
  db_reset_hard
  logs
  attach
  login
  show
  set
].freeze

opts = Optimist.options do
  version "Kaiser v#{Kaiser::VERSION}"

  banner <<-BANNER
#{version}

Subcommands:
#{SUB_COMMANDS.join ' '}
  BANNER
  opt :verbose, "Show Kaiser's debug output", short: '-v'
  opt :quiet, 'Suppress all output', short: '-q'

  stop_on SUB_COMMANDS
end

commands = SUB_COMMANDS & ARGV
cmd = commands.first
ARGV.shift

out = Kaiser::Dotter.new
info_out = Kaiser::AfterDotter.new(dotter: out)

if opts[:quiet]
  out = File.open(File::NULL, 'w')
  info_out = File.open(File::NULL, 'w')
elsif opts[:verbose]
  out = $stderr
end

cli = Kaiser::Config.load(
  `pwd`.chomp,
  debug_output: out,
  info_output: info_out
)

Kaiser::Cli.register(:init, Kaiser::CMD::Init)
Kaiser::Cli.register(:deinit, Kaiser::CMD::Deinit)
Kaiser::Cli.register(:up, Kaiser::CMD::Up)
Kaiser::Cli.register(:shutdown, Kaiser::CMD::Shutdown)
Kaiser::Cli.register(:db_save, Kaiser::CMD::DbSave)
Kaiser::Cli.register(:db_load, Kaiser::CMD::DbLoad)
Kaiser::Cli.register(:db_reset, Kaiser::CMD::DbReset)
Kaiser::Cli.register(:db_reset_hard, Kaiser::CMD::DbResetHard)
Kaiser::Cli.register(:logs, Kaiser::CMD::Logs)
Kaiser::Cli.register(:attach, Kaiser::CMD::Attach)

Kaiser::Cli.run_command(:"#{cmd}")

puts ''
