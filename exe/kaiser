#!/usr/bin/env ruby

require 'optimist'
require 'fileutils'
require 'yaml'
require 'json'
require 'pty'
require 'erb'

$LOAD_PATH << "#{__dir__}/../lib"

require "kaiser"

SUB_COMMANDS = {
  init: Kaiser::CMD::Init,
  deinit: Kaiser::CMD::Deinit,
  up: Kaiser::CMD::Up,
  shutdown: Kaiser::CMD::Shutdown,
  db_save: Kaiser::CMD::DbSave,
  db_load: Kaiser::CMD::DbLoad,
  db_reset: Kaiser::CMD::DbReset,
  db_reset_hard: Kaiser::CMD::DbResetHard,
  logs: Kaiser::CMD::Logs,
  attach: Kaiser::CMD::Attach,
  login: Kaiser::CMD::Login,
  show: Kaiser::CMD::Show,
  set: Kaiser::CMD::Set
}.freeze

sub_command_strings = SUB_COMMANDS.keys.map { |cmd| cmd.to_s }

opts = Optimist.options do
  version "Kaiser v#{Kaiser::VERSION}"

  banner <<-BANNER
#{version}

Subcommands:
#{sub_command_strings.join ' '}
  BANNER
  opt :verbose, "Show Kaiser's debug output", short: '-v'
  opt :quiet, 'Suppress all output', short: '-q'

  stop_on sub_command_strings
end

commands = sub_command_strings & ARGV
cmd = commands.first
ARGV.shift

out = Kaiser::Dotter.new
info_out = Kaiser::AfterDotter.new(dotter: out)

if opts[:quiet]
  out = File.open(File::NULL, 'w')
  info_out = File.open(File::NULL, 'w')
elsif opts[:verbose]
  out = $stderr
end

cli = Kaiser::Config.load(
  `pwd`.chomp,
  debug_output: out,
  info_output: info_out
)

SUB_COMMANDS.each { |k,v| Kaiser::Cli.register(k,v) }

Kaiser::Cli.run_command(:"#{cmd}")

puts ''
