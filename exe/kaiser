#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optimist'
require 'fileutils'
require 'yaml'
require 'json'
require 'pty'
require 'erb'

$LOAD_PATH << "#{__dir__}/../lib"

require 'kaiser'

sub_command_strings = SUB_COMMANDS.keys.map(&:to_s)

SUB_COMMANDS.each { |k, v| Kaiser::Cli.register(k, v) }

# It was difficult to allow global arguments like -v and -q to be typed both before and after cmds
# and still support `kaiser -h` for full help messages and `kaiser subcmd -h` for focused messages.
# Putting the global options in an array, using an Optimist::Parser and basically everything up to
# the 'end parser hacks' comment are all hacks to marry the above two behaviours.

global_opts = [
  [:verbose, "Show Kaiser's debug output", short: '-v'],
  [:quiet, 'Suppress all output', short: '-q']
]

parser = Optimist::Parser.new do
  version "Kaiser v#{Kaiser::VERSION}"

  banner <<~BANNER
    #{version}

    Kaiser is a tool to make development a lot easier by defining how an application starts using a \`Kaiserfile\` in the source code's root directory.

    Prerequisites
    =============

    Install docker on your system and make sure the current user has all the rights required to spin up docker containers.

    Usage
    =====

    For typical usage you'll want to do the following three commands.

    ```
    kaiser init ENV_NAME
    kaiser up
    kaiser attach
    ```

    This will boot up your application in docker and bind mount your local source directory so you can start doing development. Happy coding!

    If any of these commands are giving you trouble, please run them with the \`-v\` flag set. They will show you what exactly is happening so you can debug.

    Subcommands
    ===========

    #{Kaiser::Cli.all_subcommands_usage}
    Global Parameters
    =================
  BANNER

  global_opts.each { |o| opt *o }
end

commands = sub_command_strings & ARGV

if commands.empty?
  Optimist::with_standard_exception_handling parser do
    raise Optimist::HelpNeeded
  end
end

cmd = commands.first
## end parser hacks ##

Kaiser::Cli.run_command(:"#{cmd}", global_opts)

puts ''
