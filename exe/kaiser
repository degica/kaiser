#!/usr/bin/env ruby

require 'optimist'
require 'fileutils'
require 'yaml'
require 'json'
require 'pty'
require 'erb'

$LOAD_PATH << "#{__dir__}/../lib"

require "kaiser"

SUB_COMMANDS = {
  init: Kaiser::CMD::Init,
  deinit: Kaiser::CMD::Deinit,
  up: Kaiser::CMD::Up,
  shutdown: Kaiser::CMD::Shutdown,
  db_save: Kaiser::CMD::DbSave,
  db_load: Kaiser::CMD::DbLoad,
  db_reset: Kaiser::CMD::DbReset,
  db_reset_hard: Kaiser::CMD::DbResetHard,
  logs: Kaiser::CMD::Logs,
  attach: Kaiser::CMD::Attach,
  login: Kaiser::CMD::Login,
  show: Kaiser::CMD::Show,
  set: Kaiser::CMD::Set
}.freeze

sub_command_strings = SUB_COMMANDS.keys.map { |cmd| cmd.to_s }

SUB_COMMANDS.each { |k,v| Kaiser::Cli.register(k,v) }

opts = Optimist.options do
  version "Kaiser v#{Kaiser::VERSION}"

  banner <<-BANNER
#{version}
Kaiser is a tool to make development a lot easier by defining how an application starts using a `Kaiserfile` in the source code's root directory.

Prerequisites
=============

Install docker on your system and make sure the current user has all the rights required to spin up docker containers.

Usage
=====

For typical usage you'll want to do the following three commands.

```
kaiser init ENV_NAME
kaiser up
kaiser attach
```

This will boot up your application in docker and bind mount your local source directory so you can start doing development. Happy coding!

If any of these commands are giving you trouble, please run them with the `-v` flag set. They will show you what exactly is happening so you can debug.

Subcommands
===========

#{Kaiser::Cli.all_subcommands_usage}
Global Parameters
=================
BANNER
  opt :verbose, "Show Kaiser's debug output", short: '-v'
  opt :quiet, 'Suppress all output', short: '-q'

  stop_on sub_command_strings
end

commands = sub_command_strings & ARGV
cmd = commands.first
ARGV.shift

Optimist.educate unless cmd && SUB_COMMANDS.keys.include?(cmd.to_sym)

Kaiser::Cli.run_command(:"#{cmd}", opts)

puts ''
