RSpec.describe Kaiser do
  it 'has a version number' do
    expect(Kaiser::VERSION).not_to be nil
  end

  let(:cmd) { "#{Dir.pwd}/exe/kaiser #{args}" }
  let(:cmd_output) { `#{cmd}` }

  context "without any subcommands" do
    let(:args) { "" }

    it "prints the full usage" do
      SUB_COMMANDS.values.each { |cmd|
        usage = cmd.new.usage

        expect(cmd_output).to include("init\n----")
      }
    end
  end

  SUB_COMMANDS.each { |name, klass|
    describe name do
      subject { klass }

      context "with -h" do
        let(:args) { "#{name} -h" }

        it "prints the help message for just #{name} and nothing else" do
          # Remove the help arguments generated by Optimist as they won't be un the usage method
          unwrapped_output = cmd_output.lines.delete_if {|l| l =~ /^  -.+/ }.join

          # Remove all newlines because Optimist will wordwrap according to terminal size
          unwrapped_output.gsub!("\n", " ")
          unwrapped_usage = subject.new.usage.gsub("\n", " ")

          # Now we can check is it's the same as usage.
          expect(unwrapped_output).to eq unwrapped_usage
        end
      end
    end
  }
end
