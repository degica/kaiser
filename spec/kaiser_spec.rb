# frozen_string_literal: true

require 'open3'

RSpec.describe Kaiser do
  it 'has a version number' do
    expect(Kaiser::VERSION).not_to be nil
  end

  let(:cmd) do
    Open3.popen3("#{Dir.pwd}/exe/kaiser #{args}")
  end
  let(:cmd_stdout) { cmd[1].read }
  let(:cmd_stderr) { cmd[2].read }

  shared_examples 'full help' do
    it 'prints the full help message' do
      unwrapped_output = cmd_stdout.gsub("\n", ' ')

      SUB_COMMANDS.keys.each do |name|
        expect(unwrapped_output).to include "- #{name}"
      end
    end
  end

  context 'without any subcommands' do
    let(:args) { '' }

    include_examples 'full help'
  end

  context 'without a non existing subcommand' do
    let(:args) { 'joske' }

    include_examples 'full help'
  end

  describe 'init' do
    let(:args) { 'init' }

    context 'with no Kaiserfile' do
      it 'Returns an error' do
        expect(cmd_stdout).to eq ''
        expect(cmd_stderr).to eq "Error: No Kaiserfile in current directory.\nTry --help for help.\n"
      end
    end
  end

  describe 'help messages' do
    SUB_COMMANDS.each do |name, klass|
      describe name do
        subject { klass.new }

        it 'has a help message defined' do
          expect(subject.methods).to include :usage
          expect(subject.usage).not_to be_nil
          expect(subject.usage).not_to be_empty
          # expect(subject.usage).to be_helpful
        end

        shared_examples 'single help' do
          it "prints the help message for just #{name} and nothing else" do
            # Remove the help arguments generated by Optimist as they won't be in the usage method
            unwrapped_output = cmd_stdout.lines.delete_if { |l| l =~ /^  -.+/ }.join

            # Remove all newlines because Optimist will wordwrap according to terminal size
            unwrapped_output.gsub!("\n", ' ')
            unwrapped_usage = subject.usage.gsub("\n", ' ')

            # Now we can check is it's the same as usage.
            expect(unwrapped_output).to eq unwrapped_usage
          end
        end

        context 'with -h before the subcommand' do
          let(:args) { "-h #{name}" }

          include_examples 'single help'
        end

        context 'with -h after the subcommand' do
          let(:args) { "#{name} -h" }

          include_examples 'single help'
        end
      end
    end
  end
end
